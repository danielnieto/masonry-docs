---
title: Options
---

<p>All options are optional, but <a href="#columnwidth"><code>columnWidth</code></a> and <a href="#itemselector"><code>itemSelector</code></a> are recommended.</p>

``` js
// jQuery
$('.grid').masonry({
  columnWidth: 200,
  itemSelector: '.grid-item'
});
```

``` js
// vanilla JS
var msnry = new Masonry( '.grid', {
  columnWidth: 200,
  itemSelector: '.grid-item'
});
```

``` html
<!-- in HTML -->
<div class="grid js-masonry"
  data-masonry-options='{ "columnWidth": 200, "itemSelector": ".grid-item" }'>
```

{{! ----------------------------------------------------------- }}

<h2>Recommended</h2>

{{! ----------------------------------------------------------- }}

<h3>itemSelector</h3>

<p>Specifies which child elements will be used as item elements in the layout.</p>

<p>We recommend always setting <code>itemSelector</code>. <code>itemSelector</code> is useful to exclude <a href="#element-sizing">sizing elements</a> or other elements that are not part of the layout.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    itemSelector: '.grid-item'
    ```

    ``` html
    <div class="grid">
      <!-- do not use banner in Masonry layout -->
      <div class="static-banner">Static banner</div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      ...
    </div>
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid grid--has-banner js-masonry"
      data-masonry-options='{ "itemSelector": ".grid-item", "columnWidth": 80 }'>
      <div class="static-banner">Static banner</div>
      {{> grid-items}}
    </div>
    {{> edit-demo default="Jdbzvx" }}
  </div>
</div>

{{! ----------------------------------------------------------- }}

<h3>columnWidth</h3>

<p>Aligns items to a horizontal grid.</p>

<div class="call-out">
  <p>We recommend setting <code>columnWidth</code>. If <code>columnWidth</code> is not set, Masonry will use the outer width of the first item.</p>
</div>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    columnWidth: 80
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid js-masonry"  data-masonry-options='{ "columnWidth": 80 }'>
      {{> grid-items}}
    </div>
    {{> edit-demo default="osFxj" }}
  </div>
</div>

<p>Use <a href="../options.html#element-sizing">element sizing</a> for responsive layouts with percentage widths. Set <code>columnWidth</code> to an <i>Element</i> or Selector <i>String</i> to use the outer width of the element for the size of the gutter.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` html
    <div class="grid">
      <!-- .grid-sizer empty element, only used for element sizing -->
      <div class="grid-sizer"></div>
      <div class="grid-item"></div>
      <div class="grid-item grid-item--width2"></div>
      ...
    </div>
    ```

    ``` css
    /* fluid 5 columns */
    .grid-sizer,
    .grid-item { width: 20%; }
    /* 2 columns wide */
    .grid-item--width2 { width: 40%; }
    ```

    ``` js
    // use outer width of grid-sizer for columnWidth
    columnWidth: '.grid-sizer',
    itemSelector: '.grid-item',
    percentPosition: true
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid grid--fluid-5-col js-masonry"
      data-masonry-options='{ "itemSelector": ".grid-item", "columnWidth": ".grid-sizer",  "percentPosition": true }'>
      <div class="grid-sizer"></div>
      {{> grid-items}}
    </div>
    {{> edit-demo default="JFpeg" }}
  </div>
</div>

{{! ----------------------------------------------------------- }}

<h2>Layout</h2>

{{! ----------------------------------------------------------- }}

<h3>Element sizing</h3>

<p>Sizing options <a href="#columnwidth"><code>columnWidth</code></a> and <a href="#gutter"><code>gutter</code></a> can be set with an element. The size of the element is then used as the value of the option.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` html
    <div class="grid">
      <!-- .grid-sizer empty element, only used for element sizing -->
      <div class="grid-sizer"></div>
      <div class="grid-item"></div>
      <div class="grid-item grid-item--width2"></div>
      ...
    </div>
    ```

    ``` css
    /* fluid 5 columns */
    .grid-sizer,
    .grid-item { width: 20%; }
    /* 2 columns wide */
    .grid-item--width2 { width: 40%; }
    ```

    ``` js
    // use outer width of grid-sizer for columnWidth
    columnWidth: '.grid-sizer',
    // do not use .grid-sizer in layout
    itemSelector: '.grid-item',
    percentPosition: true
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid grid--fluid-5-col js-masonry"
      data-masonry-options='{ "itemSelector": ".grid-item", "columnWidth": ".grid-sizer",  "percentPosition": true }'>
      <div class="grid-sizer"></div>
      {{> grid-items}}
    </div>
    {{> edit-demo default="JFpeg" }}
  </div>
</div>

<p>The option can be set to a Selector <i>String</i> or an <i>Element</i>.</p>

``` js
// set to a selector string
// first matching element within container element will be used
columnWidth: '.grid-sizer'

// set to an element
columnWidth: $grid.find('.grid-sizer')[0]
```

<p>Element sizing options allow you to control the sizing of the Masonry layout within your CSS. This is useful for responsive layouts and media queries.</p>

``` css
/* 3 columns by default */
.grid-sizer { width: 33.333%; }

@media screen and (min-width: 768px) {
  /* 5 columns for larger screens */
  .grid-sizer { width: 20%; }
}
```

{{! ----------------------------------------------------------- }}

<h3>gutter</h3>

<p>Adds horizontal space between item elements.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    "gutter": 10
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid grid--gutter js-masonry" data-masonry-options='{ "gutter": 10 }'>
      {{> grid-items}}
    </div>
    {{> edit-demo default="iIbgC" }}
  </div>
</div>

<p>To set vertical space between elements, use <code>margin</code> CSS.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    "gutter": 10
    ```

    ``` css
    .grid-item {
      margin-bottom: 10px;
    }
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid grid--gutter grid--gutter-bottom js-masonry"
      data-masonry-options='{ "gutter": 10 }'>
      {{> grid-items}}
    </div>
    {{> edit-demo default="gbnko" }}
  </div>
</div>

<p>Use <a href="#element-sizing">element sizing</a> for responsive layouts with percentage widths. Set <code>gutter</code> to an <i>Element</i> or Selector <i>String</i> to use the outer width of the element.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` html
    <div class="grid">
      <div class="grid-sizer"></div>
      <div class="gutter-sizer"></div>
      <div class="grid-item"></div>
      <div class="grid-item grid-item--width2"></div>
      ...
    </div>
    ```

    ``` css
    .grid-sizer,
    .grid-item { width: 22%; }

    .gutter-sizer { width: 4%; }

    .grid-item--width2 { width: 48%; }
    ```

    ``` js
    columnWidth: '.grid-sizer',
    gutter: '.gutter-sizer',
    itemSelector: '.grid-item',
    percentPosition: true
    ```
  </div>
  <div class="duo__cell example__demo" >
    <div class="grid grid--fluid-gutter js-masonry"
      data-masonry-options='{ "itemSelector": ".grid-item", "columnWidth": ".grid-sizer", "gutter": ".gutter-sizer", "percentPosition": true }'>
      <div class="gutter-sizer"></div>
      <div class="grid-sizer"></div>
      {{> grid-items}}
    </div>
    {{> edit-demo default="BAJKn" }}
  </div>
</div>

{{! ----------------------------------------------------------- }}

<h3>percentPosition</h3>

<p>Sets item positions in percent values, rather than pixel values. <code>percentPosition: <span class="literal">true</span></code> works well with percent-width items, as items will not transition their position on resize.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    // set positions with percent values
    percentPosition: true,
    columnWidth: '.grid-sizer',
    itemSelector: '.grid-item'
    ```

    ``` css
    /* fluid 5 columns */
    .grid-sizer,
    .grid-item { width: 20%; }
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid grid--fluid-5-col js-masonry"
      data-masonry-options='{ "itemSelector": ".grid-item", "columnWidth": ".grid-sizer",  "percentPosition": true }'>
      <div class="grid-sizer"></div>
      {{> grid-items}}
    </div>
    {{> edit-demo default="JFpeg" }}
  </div>
</div>

{{! ----------------------------------------------------------- }}

<h3>stamp</h3>

<p>Specifies which elements are <em>stamped</em> within the layout. Masonry will layout items below stamped elements.</p>

<p>The <code>stamp</code> option stamps elements only when the Masonry instance is first initialized. You can stamp additional elements afterwards with the <a href="methods.html#stamp"><code>stamp</code> method</a>.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` html
    <div class="grid">
      <div class="stamp stamp1"></div>
      <div class="stamp stamp2"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      ....
    </div>
    ```

    ``` js
    // specify itemSelector so stamps do get laid out
    itemSelector: '.grid-item',
    // stamp elements
    stamp: '.stamp'
    ```

    ``` css
    /* position stamp elements with CSS */
    .stamp {
      position: absolute;
      background: orange;
      border: 4px dotted black;
    }
    .stamp1 {
      left: 30%;
      top: 10px;
      width: 20%;
      height: 100px;
    }
    .stamp2 {
      right: 10%;
      top: 20px;
      width: 70%;
      height: 30px;
    }
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid grid--has-stamp js-masonry" data-masonry-options='{ "itemSelector": ".grid-item", "stamp": ".stamp" }'>
      <div class="stamp stamp--static-stamp1"></div>
      <div class="stamp stamp--static-stamp2"></div>
      {{> grid-items}}
    </div>
    {{> edit-demo default="hsine" }}
  </div>
</div>

{{! ----------------------------------------------------------- }}

<h3>fitWidth</h3>

<p>Sets the width of the container to fit the available number of columns, based the size of container's parent element. When enabled, you can center the container with CSS.</p>

<p><code>fitWidth</code> was previously <code>isFitWidth</code> in Masonry v3. <code>isFitWidth</code> will still work in Masonry v4.</p>

<div class="call-out">
  <p><code>fitWidth: <span class="literal">true</span></code> does not work with <a href="#element-sizing">element sizing</a> with percentage width. Either <code>columnWidth</code> needs to be set to a fixed size, like <code>columnWidth: 120</code>, or items need to have a fixed size in pixels, like <code>width: 120px</code>. Otherwise, the container and item widths will collapse on one another.</p>
</div>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    fitWidth: true
    ```

    ``` css
    /* center container with CSS */
    .grid {
      margin: 0 auto;
    }
    ```
  </div>
  <div class="duo__cell example__demo example__demo--fit-width">
    <div class="grid grid--centered js-masonry"
      data-masonry-options='{ "fitWidth": true }'>
      <div class="grid-item grid-item--width2"></div>
      <div class="grid-item grid-item--width2 grid-item--height2"></div>
      <div class="grid-item grid-item--width2 grid-item--height3"></div>
      <div class="grid-item grid-item--width2 grid-item--height2"></div>
      <div class="grid-item grid-item--width2"></div>
      <div class="grid-item grid-item--width2"></div>
      <div class="grid-item grid-item--width2"></div>
      <div class="grid-item grid-item--width2 grid-item--height2"></div>
      <div class="grid-item grid-item--width2 grid-item--height3"></div>
    </div>
    {{> edit-demo default="nGLvx" }}
  </div>
</div>

{{! ----------------------------------------------------------- }}

<h3>originLeft</h3>

<p>Controls the horizontal flow of the layout. By default, item elements start positioning at the left, with <code><span class="comment">originLeft: true</span></code>. Set <code>originLeft: <span class="literal">false</span></code> for right-to-left layouts.</p>

<p><code>originLeft</code> was previously <code>isOriginLeft</code> in Masonry v3. <code>isOriginLeft</code> will still work in Masonry v4.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    originLeft: false
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid grid--counting js-masonry"
      data-masonry-options='{ "originLeft": false, "columnWidth": 80 }'>
      {{> grid-items}}
    </div>
    {{> edit-demo default="adwgL" }}
  </div>
</div>

{{! ----------------------------------------------------------- }}

<h3>originTop</h3>

<p>Controls the vertical flow of the layout. By default, item elements start positioning at the top, with <code><span class="comment">originTop: true</span></code>. Set <code>originTop: <span class="literal">false</span></code> for bottom-up layouts. It&rsquo;s like Tetris!</p>

<p><code>originTop</code> was previously <code>isOriginTop</code> in Masonry v3. <code>isOriginTop</code> will still work in Masonry v4.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    originTop: false
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid grid--counting js-masonry"
      data-masonry-options='{ "originTop": false, "columnWidth": 80 }'>
      {{> grid-items}}
    </div>
    {{> edit-demo default="uwtLs" }}
  </div>
</div>

{{! ----------------------------------------------------------- }}

<h2>Setup</h2>

{{! ----------------------------------------------------------- }}

<h3>containerStyle</h3>

<p>CSS styles that are applied to the container element.</p>

``` js
// default
// containerStyle: { position: 'relative' }

// disable any styles being set on container
// useful if using absolute position on container
containerStyle: null
```

{{! ----------------------------------------------------------- }}

<h3>transitionDuration</h3>

<p>Duration of the transition when items change position or appearance, set in a CSS time format. Default: <code><span class="comment">transitionDuration: '0.4s'</span></code></p>

``` js
// fast transitions
transitionDuration: '0.2s'

// slow transitions
transitionDuration: '0.8s'

// no transitions
transitionDuration: 0
```

{{! ----------------------------------------------------------- }}

<h3>resize</h3>

<p>Adjusts sizes and positions when window is resized. Enabled by default <code><span class="comment">resize: true</span></code>.</p>

<p><code>resize</code> was previously <code>isResizeBound</code> in Masonry v3. <code>isResizeBound</code> will still work in Masonry v4.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    // disable window resize behavior
    resize: false
    ```

    ``` css
    /* grid has fixed width */
    .grid {
      width: 320px;
    }
    ```
  </div>
  <div class="duo__cell example__demo">
    <div class="grid grid--fixed-width js-masonry"
      data-masonry-options='{ "columnWidth": 80, "resize": false }'>
      <div class="grid-item"></div>
      <div class="grid-item grid-item--width2"></div>
      <div class="grid-item grid-item--height3"></div>
      <div class="grid-item grid-item--height2"></div>
      <div class="grid-item grid-item--width2"></div>
      <div class="grid-item"></div>
      <div class="grid-item grid-item--width2 grid-item--height3"></div>
      <div class="grid-item grid-item--height2"></div>
    </div>
    {{> edit-demo default="doOLoo" }}
  </div>
</div>

{{! ----------------------------------------------------------- }}

<h3>initLayout</h3>

<p>Enables layout on initialization.
  Enabled by default <code><span class="comment">initLayout: true</span></code>.</p>

<p>Set <code>initLayout: <span class="literal">false</span></code> to disable layout on initialization, so you can use <a href="methods.html">methods</a> or add <a href="events.html">events</a> before the initial layout.</p>

<p><code>initLayout</code> was previously <code>isInitLayout</code> in Masonry v3. <code>isInitLayout</code> will still work in Masonry v4.</p>

``` js
var $grid = $('.grid').masonry({
  // disable initial layout
  initLayout: false,
  //...
});
// bind event
$grid.masonry( 'on', 'layoutComplete', function() {
  console.log('layout is complete');
});
// trigger initial layout
$grid.masonry();
```

{{> edit-demo default="zrdVbg" vanillaJS="QyMXPB"}}

{{! ----------------------------------------------------------- }}
